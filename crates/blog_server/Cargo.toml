[package]
name = "blog_server"
version.workspace = true
authors.workspace = true
description.workspace = true
edition.workspace = true

[lib]
crate-type = ["cdylib", "rlib"]

###############################################################################
# 1) クライアント側（wasm32-unknown-unknown）でもコンパイルしたい依存
###############################################################################
[dependencies]
leptos = { version = "0.7" }
leptos_router = { version = "0.7" }
leptos_meta = { version = "0.7" }
console_error_panic_hook = { version = "0.1", optional = true }
wasm-bindgen = { version = "0.2.100", optional = true }
pulldown-cmark = "0.13.0"
chrono = { version = "0.4", features = ["serde"] }
regex = "1.11.1"
toml = "0.8.20"
serde = { version = "1.0", features = ["derive"] }
thiserror = "2"

###############################################################################
# 2) サーバー（ネイティブ）でしか使わない依存
###############################################################################
[target.'cfg(not(target_arch = "wasm32"))'.dependencies]
axum = { version = "0.7", optional = true }
tokio = { version = "1", features = ["rt-multi-thread"], optional = true }
leptos_axum = { version = "0.7.0", optional = true }
log = { version = "0.4", optional = true }
aws-config = { version = "1", default-features = false, optional = true }
aws-sdk-s3 = { version = "1", default-features = false, features = [
  "rustls",
  "rt-tokio",
], optional = true }
aws-smithy-runtime-api = { version = "1", optional = true }

[features]
hydrate = ["leptos/hydrate", "dep:console_error_panic_hook", "dep:wasm-bindgen"]
ssr = [
  "dep:axum",
  "dep:tokio",
  "dep:leptos_axum",
  "dep:log",
  "dep:aws-config",
  "dep:aws-sdk-s3",
  "dep:aws-smithy-runtime-api",
  "leptos/ssr",
  "leptos_meta/ssr",
  "leptos_router/ssr",
]

# Defines a size-optimized profile for the WASM bundle in release mode
# move to the root Cargo.toml
#[profile.wasm-release]
#inherits = "release"
#opt-level = 'z'
#lto = true
#codegen-units = 1
#panic = "abort"

[package.metadata.leptos]
# The name used by wasm-bindgen/cargo-leptos for the JS/WASM bundle. Defaults to the crate name
output-name = "blog_server"

# The site root folder is where cargo-leptos generate all output. WARNING: all content of this folder will be erased on a rebuild. Use it in your server setup.
site-root = "target/site"

# The site-root relative folder where all compiled output (JS, WASM and CSS) is written
# Defaults to pkg
site-pkg-dir = "pkg"

# [Optional] The source CSS file. If it ends with .sass or .scss then it will be compiled by dart-sass into CSS. The CSS is optimized by Lightning CSS before being written to <site-root>/<site-pkg>/app.css
style-file = "style/main.scss"

# The tailwind input file.
#
# Optional, Activates the tailwind build
tailwind-input-file = "style/tailwind.css"

# Assets source dir. All files found here will be copied and synchronized to site-root.
# The assets-dir cannot have a sub directory with the same name/path as site-pkg-dir.
#
# Optional. Env: LEPTOS_ASSETS_DIR.
assets-dir = "public"

# The IP and port (ex: 127.0.0.1:3000) where the server serves the content. Use it in your server setup.
site-addr = "127.0.0.1:8008"

# The port to use for automatic reload monitoring
reload-port = 3001

# [Optional] Command to use when running end2end tests. It will run in the end2end dir.
#   [Windows] for non-WSL use "npx.cmd playwright test"
#   This binary name can be checked in Powershell with Get-Command npx
end2end-cmd = "npx playwright test"
end2end-dir = "end2end"

#  The browserlist query used for optimizing the CSS.
browserquery = "defaults"

# The environment Leptos will run in, usually either "DEV" or "PROD"
env = "DEV"

# The features to use when compiling the bin target
#
# Optional. Can be over-ridden with the command line parameter --bin-features
bin-features = ["ssr"]

# If the --no-default-features flag should be used when compiling the bin target
#
# Optional. Defaults to false.
bin-default-features = false

# The features to use when compiling the lib target
#
# Optional. Can be over-ridden with the command line parameter --lib-features
lib-features = ["hydrate"]

# If the --no-default-features flag should be used when compiling the lib target
#
# Optional. Defaults to false.
lib-default-features = false

# The profile to use for the lib target when compiling for release
#
# Optional. Defaults to "release".
lib-profile-release = "wasm-release"
